service:
  name: serverless-todo-app-linux

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function

provider:
  name: aws
  runtime: nodejs12.x

  # it should use the option provide in the CLI if it is set, if not, use dev.
  # so, if you deploy without use stage parameter, serverless will include dev
  stage: ${opt:stage, 'dev'}
  # if region is provide then use it, if not use 'eu-central-1'
  region: ${opt:region, 'eu-central-1'}

  # global environment variables
  environment:
    # The DynamoDB table have unique names. They need to be unique per account per region
    # Names are UTF-8 encoded, case-sensitive and should be between 3 and 255 charaters long
    TODOS_TABLE: ${self:service.name}-Todos-${self:provider.stage}
    # bucket name should not contain uppgercase characters
    TODOS_IMAGES_S3_BUCKET: ${self:service.name}-images-${self:provider.stage}
    # add a presigned url for the upload url s3 bucket - 10 minutes expiration time
    TODOS_SIGNED_URL_EXPIRATION: 600
    # index name for the table
    INDEX_NAME: dueDate


  # all the permissions here are global that means for all lambda functions
  iamRoleStatements:
    # TODOS_TABLE permissions for all lambda functions
    - Effect: Allow
      Action:
        - dynamodb:PutItem
        - dynamodb:DeleteItem
        - dynamodb:UpdateItem
        - dynamodb:Query
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
    # add permissions to be able to put and get objects for our s3 bucket
    - Effect: Allow
      Action:
        - s3:PutObject
        - s3:GetObject
        - s3:DeleteObject
      Resource: arn:aws:s3:::${self:provider.environment.TODOS_IMAGES_S3_BUCKET}/*


functions:

  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  # TODO: Configure this function
  GetTodos:
    handler: src/lambda/http/getTodos.handler
    events:
      - http:
          method: get
          path: todos
          # fix problem with preflight request
          cors: true
          # so we specified here that it should use the auth func. specified before
          authorizer: Auth


  # # TODO: Configure this function
  CreateTodo:
    handler: src/lambda/http/createTodo.handler
    events:
      - http:
          method: post
          path: todos
          cors: true
          # so we specified here that it should use the auth func. specified before
          authorizer: Auth

  # # TODO: Configure this function
  UpdateTodo:
    handler: src/lambda/http/updateTodo.handler
    events:
      - http:
          method: patch
          path: todos/{todoId}
          cors: true
          authorizer: Auth


  DeleteTodo:
    handler: src/lambda/http/deleteTodo.handler
    events:
      - http:
          method: delete
          path: todos/{todoId}
          cors: true
          authorizer: Auth


  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: todos/{todoId}/attachment
          cors: true
          authorizer: Auth

resources:
  Resources:
    # Add DynamoDB Table Definition
    # DynamoDB is schemaless, we need to define only the primary key and global secondary keys.
    TodosDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        # single id field of type string which is the partition key
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: todoId
            AttributeType: S
        # so, we set the simple primary key as hash key
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: todoId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.TODOS_TABLE}



    # add S3 buckte to store images
    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.TODOS_IMAGES_S3_BUCKET}
    # important so S3 can send the correct CORS HEADERS
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000
    # Add BucketPolicy to allow to read images in our application
    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              # allows for anybody '*' to get objects of our s3 bucket
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.TODOS_IMAGES_S3_BUCKET}/*'
      # specify which bucket this bucketPolicy should be applied
        Bucket: !Ref AttachmentsBucket

    # we need to provide correct CORS headers if our customer authorizer
    # denies access to any functions. It set correct CORS headers if our customer authorizer fails.
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi